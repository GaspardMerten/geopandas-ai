{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"GeoPandas-AI","text":"<p>GeoPandas-AI is an open-source Python library that enhances geospatial data analysis by turning the <code>GeoDataFrame</code> into a conversational, intelligent assistant. It seamlessly integrates large language models (LLMs) into the geospatial workflow, enabling natural language interaction, iterative refinement, caching, and code generation directly within your Python environment.</p> <p> View on GitHub \u2192</p>"},{"location":"#motivation","title":"\ud83c\udf0d Motivation","text":"<p>Geospatial data is key to solving complex problems in urban planning, environmental science, and infrastructure development. But tools like GeoPandas require familiarity with both GIS concepts and Python-based workflows.</p> <p>GeoPandas-AI lowers this barrier by:</p> <ul> <li>Embedding conversational AI directly into <code>GeoDataFrame</code> </li> <li>Enabling plain-language queries and refinements  </li> <li>Supporting reproducible, scriptable workflows with AI-assisted code  </li> <li>Caching results to avoid redundant LLM calls  </li> </ul> <p>This bridges human interaction with geospatial analysis in a seamless and stateful way.</p>"},{"location":"#whats-new","title":"\ud83e\udde0 What\u2019s New?","text":"<p>Based on the arXiv preprint, GeoPandas-AI introduces:</p> <ul> <li>\u2705 A stateful, LLM-augmented <code>GeoDataFrameAI</code> class  </li> <li>\u2705 <code>.chat()</code> and <code>.improve()</code> methods for language-based querying and iteration  </li> <li>\u2705 Built-in caching: repeated prompts reuse cached results (no extra LLM calls)  </li> <li>\u2705 Full compatibility with existing <code>GeoDataFrame</code> workflows  </li> <li>\u2705 Modular backends for execution, injection, caching, and LLM calls  </li> <li>\u2705 A vision of conversational programming for geospatial developers  </li> </ul> <p>Read the paper: GeoPandas-AI: A Smart Class Bringing LLM as Stateful AI Code Assistant</p>"},{"location":"#installation","title":"\u2699\ufe0f Installation","text":"<pre><code>pip install geopandas-ai\n````\n\nPython 3.8+ required.\n\n---\n\n## \ud83d\ude80 Quick Start\n\n### Example 1: Read and visualize spatial data interactively\n\n```python\nimport geopandasai as gpdai\n\ngdfai = gpdai.read_file(\"cities.geojson\")\ngdfai.chat(\"Plot the cities by population\")\ngdfai.improve(\"Add a title and a basemap\")\n</code></pre>"},{"location":"#example-2-wrap-an-existing-geodataframe","title":"Example 2: Wrap an existing GeoDataFrame","text":"<pre><code>import geopandas as gpd\nfrom geopandasai import GeoDataFrameAI\n\ngdf = gpd.read_file(\"parks.geojson\")\ngdfai = GeoDataFrameAI(\n    gdf,\n    description=\"City parks with name, area, and geometry\"\n)\n\ngdfai.chat(\"Show the largest 5 parks\")\n</code></pre>"},{"location":"#example-3-work-with-multiple-dataframes","title":"Example 3: Work with multiple dataframes","text":"<pre><code>a = gpdai.read_file(\"zones.geojson\")\nb = gpdai.read_file(\"reference.geojson\")\n\na.set_description(\"Zoning polygons for city planning\")\nb.set_description(\"Reference dataset with official labels\")\n\na.chat(\n    \"Cluster the zones into 3 groups based on geometry size\",\n    b,\n    provided_libraries=[\"scikit-learn\", \"numpy\"],\n    return_type=int\n)\n</code></pre>"},{"location":"#configuration-caching","title":"\ud83d\udd27 Configuration &amp; Caching","text":"<p>GeoPandas-AI uses a flexible dependency-injection architecture (via <code>dependency_injector</code>) to manage:</p> <ul> <li>LiteLLM settings</li> <li>Cache backend (memoizes <code>.chat()</code> and <code>.improve()</code> calls)</li> <li>Code executor (trusted or sandboxed)</li> <li>Code injector</li> <li>Data descriptor</li> <li>Allowed return types</li> </ul>"},{"location":"#built-in-caching","title":"Built-in caching","text":"<p>By default, responses and generated code are cached on disk:</p> <pre><code>from geopandasai.external.cache.backend.file_system import FileSystemCacheBackend\n\n# Default writes to `.gpd_cache/`\n</code></pre> <p>Any repeated prompt or improvement will reuse cached results, saving tokens and accelerating workflows.</p>"},{"location":"#customizing-configuration","title":"Customizing configuration","text":"<p>Override defaults with <code>update_geopandasai_config()</code>:</p> <pre><code>from geopandasai import update_geopandasai_config\nfrom geopandasai.external.cache.backend.file_system import FileSystemCacheBackend\nfrom geopandasai.services.inject.injectors.print_inject import PrintCodeInjector\nfrom geopandasai.services.code.executor import TrustedCodeExecutor\n\nupdate_geopandasai_config(\n    cache_backend=FileSystemCacheBackend(cache_dir=\".gpd_cache\"),\n    executor=TrustedCodeExecutor(),\n    injector=PrintCodeInjector(),\n    libraries=[\n      \"pandas\",\n      \"matplotlib.pyplot\",\n      \"folium\",\n      \"geopandas\",\n      \"contextily\",\n    ],\n)\n</code></pre>"},{"location":"#forcing-fresh-llm-calls","title":"Forcing fresh LLM calls","text":"<p>To clear all memory and cache for a fresh start:</p> <pre><code>gdfai.reset()\n</code></pre>"},{"location":"#learn-more","title":"\ud83d\udcda Learn More","text":"<ul> <li>\ud83d\udce6 PyPI Package</li> <li>\ud83d\udcd6 arXiv Preprint</li> <li>\ud83d\udcd8 Example Notebooks</li> <li>\ud83e\udde0 LiteLLM Docs</li> <li>\ud83d\udee0 GitHub Repository</li> </ul>"},{"location":"#citation","title":"\ud83d\udcc4 Citation","text":"<p>If you use GeoPandas-AI in academic work, please cite:</p> <pre><code>@misc{merten2025geopandasaismartclassbringing,\n  title={GeoPandas-AI: A Smart Class Bringing LLM as Stateful AI Code Assistant}, \n  author={Gaspard Merten and Gilles Dejaegere and Mahmoud Sakr},\n  year={2025},\n  eprint={2506.11781},\n  archivePrefix={arXiv},\n  primaryClass={cs.HC},\n  url={https://arxiv.org/abs/2506.11781}, \n}\n</code></pre>"},{"location":"#license","title":"\ud83e\udeaa License","text":"<p>MIT License \u2013 see LICENSE for details.</p> <p>GeoPandas-AI: Making geospatial analysis conversational, intelligent, and reproducible.</p>"},{"location":"api/","title":"API Reference","text":""},{"location":"api/#geopandasai.ACacheBackend","title":"<code>ACacheBackend</code>","text":"<p>               Bases: <code>ABC</code></p> Source code in <code>geopandasai/external/cache/backend/base.py</code> <pre><code>class ACacheBackend(abc.ABC):\n    def get_cache(self, key: str) -&gt; Optional[bytes]:\n        \"\"\"\n        Get the cached result for the given key.\n        \"\"\"\n        pass\n\n    def set_cache(self, key: str, value: bytes) -&gt; None:\n        \"\"\"\n        Set the cached result for the given key.\n        \"\"\"\n        pass\n\n    def clear_cache(self, key: str) -&gt; None:\n        \"\"\"\n        Clear the cached result for the given key.\n        \"\"\"\n        pass\n\n    def reset_cache(self) -&gt; None:\n        \"\"\"\n        Reset the cache.\n        \"\"\"\n        pass\n</code></pre>"},{"location":"api/#geopandasai.ACacheBackend.clear_cache","title":"<code>clear_cache(key)</code>","text":"<p>Clear the cached result for the given key.</p> Source code in <code>geopandasai/external/cache/backend/base.py</code> <pre><code>def clear_cache(self, key: str) -&gt; None:\n    \"\"\"\n    Clear the cached result for the given key.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"api/#geopandasai.ACacheBackend.get_cache","title":"<code>get_cache(key)</code>","text":"<p>Get the cached result for the given key.</p> Source code in <code>geopandasai/external/cache/backend/base.py</code> <pre><code>def get_cache(self, key: str) -&gt; Optional[bytes]:\n    \"\"\"\n    Get the cached result for the given key.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"api/#geopandasai.ACacheBackend.reset_cache","title":"<code>reset_cache()</code>","text":"<p>Reset the cache.</p> Source code in <code>geopandasai/external/cache/backend/base.py</code> <pre><code>def reset_cache(self) -&gt; None:\n    \"\"\"\n    Reset the cache.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"api/#geopandasai.ACacheBackend.set_cache","title":"<code>set_cache(key, value)</code>","text":"<p>Set the cached result for the given key.</p> Source code in <code>geopandasai/external/cache/backend/base.py</code> <pre><code>def set_cache(self, key: str, value: bytes) -&gt; None:\n    \"\"\"\n    Set the cached result for the given key.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"api/#geopandasai.read_arrow","title":"<code>read_arrow(source, *args, **kwargs)</code>","text":"<p>Read Arrow (e.g. pyarrow.Table) data and return a GeoDataFrameAI.</p> Source code in <code>geopandasai/wrapper.py</code> <pre><code>def read_arrow(\n    source,\n    *args,\n    **kwargs,\n) -&gt; GeoDataFrameAI:\n    \"\"\"\n    Read Arrow (e.g. pyarrow.Table) data and return a GeoDataFrameAI.\n    \"\"\"\n    return GeoDataFrameAI(gpd.read_arrow(source, *args, **kwargs))\n</code></pre>"},{"location":"api/#geopandasai.read_feather","title":"<code>read_feather(path, *args, **kwargs)</code>","text":"<p>Read a Feather file and return a GeoDataFrameAI.</p> Source code in <code>geopandasai/wrapper.py</code> <pre><code>def read_feather(\n    path: str,\n    *args,\n    **kwargs,\n) -&gt; GeoDataFrameAI:\n    \"\"\"\n    Read a Feather file and return a GeoDataFrameAI.\n    \"\"\"\n    return GeoDataFrameAI(gpd.read_feather(path, *args, **kwargs))\n</code></pre>"},{"location":"api/#geopandasai.read_file","title":"<code>read_file(filename, *args, **kwargs)</code>","text":"<p>Read a vector file (shapefile, GeoJSON, etc.) and return a GeoDataFrameAI.</p> Source code in <code>geopandasai/wrapper.py</code> <pre><code>def read_file(\n    filename: str,\n    *args,\n    **kwargs,\n) -&gt; GeoDataFrameAI:\n    \"\"\"\n    Read a vector file (shapefile, GeoJSON, etc.) and return a GeoDataFrameAI.\n    \"\"\"\n    return GeoDataFrameAI(gpd.read_file(filename, *args, **kwargs))\n</code></pre>"},{"location":"api/#geopandasai.read_fileobj","title":"<code>read_fileobj(fileobj, *args, **kwargs)</code>","text":"<p>Read a file-like object and return a GeoDataFrameAI.</p> Source code in <code>geopandasai/wrapper.py</code> <pre><code>def read_fileobj(\n    fileobj,\n    *args,\n    **kwargs,\n) -&gt; GeoDataFrameAI:\n    \"\"\"\n    Read a file-like object and return a GeoDataFrameAI.\n    \"\"\"\n    return GeoDataFrameAI(gpd.read_file(fileobj, *args, **kwargs))\n</code></pre>"},{"location":"api/#geopandasai.read_parquet","title":"<code>read_parquet(path, *args, **kwargs)</code>","text":"<p>Read a Parquet file and return a GeoDataFrameAI.</p> Source code in <code>geopandasai/wrapper.py</code> <pre><code>def read_parquet(\n    path: str,\n    *args,\n    **kwargs,\n) -&gt; GeoDataFrameAI:\n    \"\"\"\n    Read a Parquet file and return a GeoDataFrameAI.\n    \"\"\"\n    return GeoDataFrameAI(gpd.read_parquet(path, *args, **kwargs))\n</code></pre>"},{"location":"api/#geopandasai.read_postgis","title":"<code>read_postgis(sql, con, *args, **kwargs)</code>","text":"<p>Read data from a PostGIS-enabled database and return a GeoDataFrameAI.</p> Source code in <code>geopandasai/wrapper.py</code> <pre><code>def read_postgis(\n    sql: str,\n    con,\n    *args,\n    **kwargs,\n) -&gt; GeoDataFrameAI:\n    \"\"\"\n    Read data from a PostGIS-enabled database and return a GeoDataFrameAI.\n    \"\"\"\n    return GeoDataFrameAI(gpd.read_postgis(sql, con, *args, **kwargs))\n</code></pre>"},{"location":"api/#geopandasai.reset_cache","title":"<code>reset_cache()</code>","text":"<p>Reset the entire cache.</p> Source code in <code>geopandasai/external/cache/utils.py</code> <pre><code>def reset_cache():\n    \"\"\"\n    Reset the entire cache.\n    \"\"\"\n    instance = _get_cache_backend()\n    instance.reset_cache()\n</code></pre>"},{"location":"api/#geopandasai.to_feather","title":"<code>to_feather(gdf, path, *args, **kwargs)</code>","text":"<p>Write a GeoDataFrameAI to a Feather file.</p> Source code in <code>geopandasai/wrapper.py</code> <pre><code>def to_feather(\n    gdf: GeoDataFrameAI,\n    path: str,\n    *args,\n    **kwargs,\n) -&gt; None:\n    \"\"\"\n    Write a GeoDataFrameAI to a Feather file.\n    \"\"\"\n    gdf.to_feather(path, *args, **kwargs)\n</code></pre>"},{"location":"api/#geopandasai.to_file","title":"<code>to_file(gdf, filename, *args, **kwargs)</code>","text":"<p>Write a GeoDataFrameAI to a file (shapefile, GeoPackage, GeoJSON, etc.).</p> Source code in <code>geopandasai/wrapper.py</code> <pre><code>def to_file(\n    gdf: GeoDataFrameAI,\n    filename: str,\n    *args,\n    **kwargs,\n) -&gt; None:\n    \"\"\"\n    Write a GeoDataFrameAI to a file (shapefile, GeoPackage, GeoJSON, etc.).\n    \"\"\"\n    gdf.to_file(filename, *args, **kwargs)\n</code></pre>"},{"location":"api/#geopandasai.to_parquet","title":"<code>to_parquet(gdf, path, *args, **kwargs)</code>","text":"<p>Write a GeoDataFrameAI to a Parquet file.</p> Source code in <code>geopandasai/wrapper.py</code> <pre><code>def to_parquet(\n    gdf: GeoDataFrameAI,\n    path: str,\n    *args,\n    **kwargs,\n) -&gt; None:\n    \"\"\"\n    Write a GeoDataFrameAI to a Parquet file.\n    \"\"\"\n    gdf.to_parquet(path, *args, **kwargs)\n</code></pre>"},{"location":"api/#geopandasai.to_postgis","title":"<code>to_postgis(gdf, name, con, *args, **kwargs)</code>","text":"<p>Write a GeoDataFrameAI to a PostGIS-enabled database.</p> Source code in <code>geopandasai/wrapper.py</code> <pre><code>def to_postgis(\n    gdf: GeoDataFrameAI,\n    name: str,\n    con,\n    *args,\n    **kwargs,\n) -&gt; None:\n    \"\"\"\n    Write a GeoDataFrameAI to a PostGIS-enabled database.\n    \"\"\"\n    gdf.to_postgis(name, con, *args, **kwargs)\n</code></pre>"},{"location":"examples/","title":"\ud83d\udcd8 Examples","text":"<p>This page provides end-to-end example workflows showcasing GeoPandas-AI in action, including how to extend it with custom backends (cache, injector, descriptor, executor).</p>"},{"location":"examples/#1-interactive-visualization-refinement","title":"1. Interactive Visualization &amp; Refinement","text":"<pre><code>import geopandasai as gpdai\n\n# Load a GeoJSON of world capitals\ngdfai = gpdai.read_file(\"data/world_capitals.geojson\")\n\n# 1.1 Plot capitals sized by population\nfig1 = gdfai.chat(\"Create a scatter plot of world capitals, sizing points by population\")\nfig1\n\n# 1.2 Improve: add title, legend, and basemap\nfig2 = gdfai.improve(\n    \"Add a descriptive title, show a legend for population size, and overlay a contextily basemap\"\n)\nfig2\n````\n\n---\n\n## 2. Filtering &amp; Tabular Output\n\n```python\nfrom geopandasai import GeoDataFrameAI\nimport geopandas as gpd\n\n# Load neighborhoods dataset\ngdf = gpd.read_file(\"data/neighborhoods.geojson\")\ngdfai = GeoDataFrameAI(gdf, description=\"Neighborhood polygons with demographics\")\n\n# 2.1 List neighborhoods with population density &gt; 5000 people/km\u00b2\nhigh_density = gdfai.chat(\n    \"Return a GeoDataFrame of neighborhoods with density over 5000 people per square kilometer\",\n    return_type=type(gdf)  # returns a GeoDataFrame\n)\nhigh_density.head()\n</code></pre>"},{"location":"examples/#3-multi-dataset-spatial-join","title":"3. Multi-Dataset Spatial Join","text":"<pre><code># Load two datasets\nschools = gpdai.read_file(\"data/schools.geojson\")\nzones   = gpdai.read_file(\"data/zoning.geojson\")\n\n# Describe each\nschools.set_description(\"Point locations of public schools\")\nzones.set_description(\"Polygon boundaries of administrative zones\")\n\n# 3.1 Count schools per zone\ncount_df = schools.chat(\n    \"For each zone, count how many schools fall within it and return a DataFrame with zone_id and count\",\n    zones,\n    return_type=type(zones)  # DataFrame or GeoDataFrame\n)\ncount_df.head()\n</code></pre>"},{"location":"examples/#4-clustering-map-styling","title":"4. Clustering &amp; Map Styling","text":"<pre><code># Cluster city crime incidents\nincidents = gpdai.read_file(\"data/crime_incidents.geojson\")\nincidents.set_description(\"Crime incident points with latitude, longitude, and type\")\n\n# 4.1 Cluster incidents into 4 clusters using KMeans\nclusters = incidents.chat(\n    \"Cluster the crime incidents into 4 spatial clusters using scikit-learn\",\n    provided_libraries=[\"scikit-learn\"],\n    return_type=int\n)\n# clusters is a pandas Series of cluster labels\n\n# 4.2 Visualize clusters with distinct colors\nincidents.improve(\n    \"Plot the incident points colored by cluster label and add a legend\"\n)\n</code></pre>"},{"location":"examples/#5-caching-reuse","title":"5. Caching &amp; Reuse","text":"<pre><code># Running the same prompt twice uses cache\nparks = gpdai.read_file(\"data/parks.geojson\")\nparks.set_description(\"City park polygons with area\")\n\n# First run invokes LLM\nparks.chat(\"Plot parks with area &gt; 100 hectares\")\n\n# Second run reuses cached result (no LLM call)\nparks.chat(\"Plot parks with area &gt; 100 hectares\")\n</code></pre>"},{"location":"examples/#6-code-inspection-injection","title":"6. Code Inspection &amp; Injection","text":"<pre><code># Inspect last generated code\nprint(parks.code)\n\n# Inject the function into ai.py for reuse\nparks.inject(\"plot_large_parks\")\n\n# In another script or cell:\nimport ai\nai.plot_large_parks(parks)\n</code></pre>"},{"location":"examples/#7-custom-configuration","title":"7. Custom Configuration","text":"<pre><code>from geopandasai import update_geopandasai_config\nfrom geopandasai.external.cache.backend.file_system import FileSystemCacheBackend\nfrom geopandasai.services.inject.injectors.print_inject import PrintCodeInjector\nfrom geopandasai.services.code.executor import TrustedCodeExecutor\n\n# Redirect cache to custom folder and use print injector\nupdate_geopandasai_config(\n    cache_backend=FileSystemCacheBackend(cache_dir=\"custom_cache\"),\n    injector=PrintCodeInjector(),\n    executor=TrustedCodeExecutor()\n)\n</code></pre>"},{"location":"examples/#8-extending-geopandas-ai-with-custom-backends","title":"8. Extending GeoPandas-AI with Custom Backends","text":""},{"location":"examples/#81-custom-code-injector","title":"8.1 Custom Code Injector","text":"<p>Subclass <code>ACodeInjector</code> to define how code is inserted into your project. For example, the built-in <code>PythonCodeInjector</code> searches your source file for a pattern and replaces it:</p> <pre><code>import inspect, re\nfrom typing import Callable, Optional\nfrom geopandasai.services.inject.injectors.base import ACodeInjector\n\nclass PythonCodeInjector(ACodeInjector):\n    def inject(\n        self,\n        pattern: re.Pattern,\n        function_call_builder: Callable[[Optional[re.Match]], str],\n        import_statement: str,\n    ):\n        # Locate the calling file\n        frame = inspect.currentframe()\n        filename = frame.f_back.f_back.f_back.f_code.co_filename\n        with open(filename, \"r\") as f:\n            code = f.read()\n        # Find the first match\n        match = pattern.search(code)\n        if not match:\n            raise ValueError(\"Pattern not found in code.\")\n        # Add import if missing\n        if import_statement not in code:\n            code = f\"{import_statement}\\n{code}\"\n        # Replace the matched call with your generated function call\n        new_code = code.replace(match.group(0), function_call_builder(match))\n        with open(filename, \"w\") as f:\n            f.write(new_code)\n</code></pre> <p>Configure GeoPandas-AI to use it:</p> <pre><code>from geopandasai import update_geopandasai_config\nfrom mymodule.injectors import PythonCodeInjector\n\nupdate_geopandasai_config(injector=PythonCodeInjector())\n</code></pre>"},{"location":"examples/#82-custom-data-descriptor","title":"8.2 Custom Data Descriptor","text":"<p>Subclass <code>ADescriptor</code> to control the data summary sent to the LLM. Example: <code>PublicDataDescriptor</code> includes schema, stats, and sample rows:</p> <pre><code>import geopandas as gpd\nimport pandas as pd\nfrom geopandasai.services.description.descriptor.base import ADescriptor\nfrom geopandasai.shared.return_type import type_to_literal\n\nclass PublicDataDescriptor(ADescriptor):\n    def __init__(self, sample_rows: int = 20):\n        super().__init__()\n        self.sample_rows = sample_rows\n\n    def describe(self, instance) -&gt; str:\n        desc = f\"Type: {type_to_literal(type(instance))}\\n\"\n        if isinstance(instance, gpd.GeoDataFrame):\n            desc += f\"CRS: {instance.crs}\\n\"\n            desc += f\"Geometry types: {', '.join(instance.geometry.geom_type.unique())}\\n\"\n        desc += f\"Shape: {instance.shape}\\n\"\n        desc += instance.describe().to_string() + \"\\n\"\n        sample = instance.sample(min(len(instance), self.sample_rows), random_state=42)\n        desc += \"Sample rows:\\n\" + sample.to_string(index=False)\n        return desc\n</code></pre> <p>Activate it:</p> <pre><code>from geopandasai import update_geopandasai_config\nfrom mymodule.descriptors import PublicDataDescriptor\n\nupdate_geopandasai_config(descriptor=PublicDataDescriptor(sample_rows=10))\n</code></pre>"},{"location":"examples/#83-custom-code-executor","title":"8.3 Custom Code Executor","text":"<p>Subclass <code>TrustedCodeExecutor</code> to add safety checks or confirmations. Example: <code>UntrustedCodeExecutor</code> shows code with syntax highlighting and asks for user approval before executing:</p> <pre><code>import re\nfrom colorama import Fore, Style\nfrom geopandasai.services.code.executor.trusted import TrustedCodeExecutor\n\ndef highlight(code: str) -&gt; str:\n    # Simple color highlighting for Python keywords and strings\n    code = re.sub(r\"\\b(def|return|if|else|import|from)\\b\", \n                  lambda m: Fore.BLUE + m.group(0) + Style.RESET_ALL, code)\n    code = re.sub(r\"(\\\".*?\\\"|\\'.*?\\')\", \n                  lambda m: Fore.GREEN + m.group(0) + Style.RESET_ALL, code)\n    return code\n\nclass UntrustedCodeExecutor(TrustedCodeExecutor):\n    def execute(self, code: str, return_type, *dfs):\n        print(highlight(code))\n        confirm = input(\"Execute this code? (y/N): \").lower() == \"y\"\n        if not confirm:\n            raise RuntimeError(\"Execution aborted by user.\")\n        return super().execute(code, return_type, *dfs)\n</code></pre> <p>Use it:</p> <pre><code>from geopandasai import update_geopandasai_config\nfrom mymodule.executors import UntrustedCodeExecutor\n\nupdate_geopandasai_config(executor=UntrustedCodeExecutor())\n</code></pre> <p>\u2757 Tip: After customizing any backend, call <code>.reset()</code> on your <code>GeoDataFrameAI</code> instance to clear prior state and ensure new settings take effect.</p> <p>Happy hacking!</p>"},{"location":"getting_started/","title":"\ud83e\uddea Getting Started with GeoPandas-AI","text":"<p>Welcome to GeoPandas-AI \u2014 a Python library that transforms your <code>GeoDataFrame</code> into a conversational, intelligent assistant powered by large language models (LLMs). This guide walks you through installation, basic usage, stateful chatting, caching, and advanced configuration.</p>"},{"location":"getting_started/#installation","title":"\ud83d\udce6 Installation","text":"<p>GeoPandas-AI requires Python 3.8+. Install via pip:</p> <pre><code>pip install geopandas-ai\n````\n\nThis will pull in dependencies including GeoPandas and LiteLLM.\n\n---\n\n## \ud83d\udcc2 Supported Data Formats\n\nGeoPandas-AI works with any file `geopandas.read_file()` supports:\n\n* GeoJSON\n* Shapefile\n* GeoPackage\n* Or wrap an existing `GeoDataFrame`\n\n---\n\n## \ud83d\ude80 First Steps\n\n### 1. Load spatial data and ask a question\n\n```python\nimport geopandasai as gpdai\n\ngdfai = gpdai.read_file(\"data/cities.geojson\")\ngdfai.chat(\"Plot the cities by population\")\n</code></pre>"},{"location":"getting_started/#2-refine-the-output-in-plain-english","title":"2. Refine the output in plain English","text":"<pre><code>gdfai.improve(\"Add a basemap and set the title to 'City Population Map'\")\n</code></pre>"},{"location":"getting_started/#3-wrap-an-existing-geodataframe","title":"3. Wrap an existing <code>GeoDataFrame</code>","text":"<pre><code>import geopandas as gpd\nfrom geopandasai import GeoDataFrameAI\n\ngdf = gpd.read_file(\"parks.geojson\")\ngdfai = GeoDataFrameAI(\n    gdf,\n    description=\"Public parks with name, area, and geometry\"\n)\n\ngdfai.chat(\"Show the largest five parks by area\")\n</code></pre>"},{"location":"getting_started/#stateful-chatting","title":"\ud83d\udd01 Stateful Chatting","text":"<p>GeoPandas-AI preserves context across turns:</p> <pre><code>gdfai.chat(\"Cluster the parks by area using KMeans\")\ngdfai.improve(\"Use different colors for each cluster and display centroids\")\n</code></pre> <p>You can combine multiple datasets in one conversation:</p> <pre><code>schools = gpdai.read_file(\"schools.geojson\")\nzones   = gpdai.read_file(\"zones.geojson\")\n\nschools.set_description(\"Public school locations\")\nzones.set_description(\"City zoning polygons\")\n\nschools.chat(\n  \"Count how many schools fall into each zone\",\n  zones,\n  return_type=DataFrame\n)\n</code></pre>"},{"location":"getting_started/#caching-backend-configuration","title":"\ud83e\udde0 Caching &amp; Backend Configuration","text":"<p>GeoPandas-AI uses a dependency-injection config system (via <code>dependency_injector</code>) to manage:</p> <ul> <li>Cache backend</li> <li>LLM settings</li> <li>Code executor</li> <li>Code injector</li> <li>Data descriptor</li> <li>Allowed return types</li> </ul>"},{"location":"getting_started/#why-caching","title":"Why caching?","text":"<p>All <code>.chat()</code> and <code>.improve()</code> calls are memoized. Repeating the same prompt reuses cached results\u2014no new LLM call\u2014saving tokens and time.</p>"},{"location":"getting_started/#default-cache-backend","title":"Default cache backend","text":"<p>By default, GeoPandas-AI uses a filesystem cache:</p> <pre><code>from geopandasai.external.cache.backend.file_system import FileSystemCacheBackend\n\n# Default writes to `.gpd_cache/` in your working directory\n</code></pre>"},{"location":"getting_started/#customize-configuration","title":"Customize configuration","text":"<p>Use <code>update_geopandasai_config()</code> to override defaults:</p> <pre><code>from geopandasai import update_geopandasai_config\nfrom geopandasai.external.cache.backend.file_system import FileSystemCacheBackend\nfrom geopandasai.services.inject.injectors.print_inject import PrintCodeInjector\nfrom geopandasai.services.code.executor import TrustedCodeExecutor\n\nupdate_geopandasai_config(\n  cache_backend=FileSystemCacheBackend(cache_dir=\".gpd_cache\"),\n  executor=TrustedCodeExecutor(),\n  injector=PrintCodeInjector(),\n  libraries=[\"pandas\",\"matplotlib.pyplot\",\"folium\",\"geopandas\",\"contextily\"],\n)\n</code></pre>"},{"location":"getting_started/#forcing-a-fresh-llm-call","title":"Forcing a fresh LLM call","text":"<p>To clear cache and memory, use:</p> <pre><code>gdfai.reset()\n</code></pre>"},{"location":"getting_started/#advanced-usage-injection-modularity","title":"\ud83d\udca5 Advanced Usage: Injection &amp; Modularity","text":""},{"location":"getting_started/#inspect-generated-code","title":"Inspect generated code","text":"<pre><code>print(gdfai.code)    # View last generated Python code\ngdfai.inspect()      # Print prompt, code, and result history\n</code></pre>"},{"location":"getting_started/#inject-code-into-your-project","title":"Inject code into your project","text":"<p>Persist or reuse AI-generated functions:</p> <pre><code>gdfai.inject(\"my_custom_function\")\n# This writes the function into ai.py (or your chosen module)\n</code></pre> <p>Then call it as a normal function:</p> <pre><code>import ai\ndf = ai.my_custom_function(gdf1, gdf2)\n</code></pre>"},{"location":"getting_started/#next-steps","title":"\ud83d\udcda Next Steps","text":"<ul> <li>Examples: see <code>examples/</code> in the GitHub repo</li> <li>API Reference: <code>api.md</code> (with <code>mkdocstrings</code>)</li> <li>Read the Paper: arXiv:2506.11781</li> </ul>"},{"location":"getting_started/#troubleshooting","title":"\ud83c\udd98 Troubleshooting","text":"<ul> <li>No output? Ensure you\u2019re in a Jupyter notebook or assign <code>.chat()</code> to a variable.</li> <li>LLM errors/timeouts? Check your LiteLLM backend configuration.</li> <li>Stale prompts? Call <code>gdfai.reset()</code> to clear conversation memory.</li> </ul> <p>GeoPandas-AI makes geospatial analysis conversational, intelligent, and reproducible.</p>"}]}